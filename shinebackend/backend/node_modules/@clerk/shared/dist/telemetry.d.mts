import { InstanceType } from '@clerk/types';

type TelemetryCollectorOptions = {
    /**
     * If true, telemetry will not be collected.
     */
    disabled?: boolean;
    /**
     * If true, telemetry will not be sent, but collected events will be logged to the console.
     */
    debug?: boolean;
    /**
     * Sampling rate, 0-1
     */
    samplingRate?: number;
    /**
     * Set a custom buffer size to control how often events are sent
     */
    maxBufferSize?: number;
    /**
     * The publishableKey to associate with the collected events.
     */
    publishableKey?: string;
    /**
     * The secretKey to associate with the collected events.
     */
    secretKey?: string;
    /**
     * The current clerk-js version.
     */
    clerkVersion?: string;
    /**
     * The SDK being used, e.g. `@clerk/nextjs` or `@clerk/remix`.
     */
    sdk?: string;
    /**
     * The version of the SDK being used.
     */
    sdkVersion?: string;
};
type TelemetryEvent = {
    event: string;
    /**
     * publishableKey
     */
    pk?: string;
    /**
     * secretKey
     */
    sk?: string;
    /**
     * instanceType
     */
    it: InstanceType;
    /**
     * clerkVersion
     */
    cv: string;
    /**
     * SDK
     */
    sdk?: string;
    /**
     * SDK Version
     */
    sdkv?: string;
    payload: Record<string, string | number | boolean>;
};
type TelemetryEventRaw<Payload = TelemetryEvent['payload']> = {
    event: TelemetryEvent['event'];
    eventSamplingRate?: number;
    payload: Payload;
};

declare class TelemetryCollector {
    #private;
    constructor(options: TelemetryCollectorOptions);
    get isEnabled(): boolean;
    get isDebug(): boolean;
    record(event: TelemetryEventRaw): void;
}

type EventComponentMounted = {
    component: string;
    appearanceProp: boolean;
    elements: boolean;
    variables: boolean;
    baseTheme: boolean;
};
/**
 * Fired when one of the Clerk components is mounted.
 */
declare function eventComponentMounted(component: string, props?: Record<string, any>): TelemetryEventRaw<EventComponentMounted>;

type EventMethodCalled = {
    method: string;
} & Record<string, string | number | boolean>;
/**
 * Fired when a helper method is called from a Clerk SDK.
 */
declare function eventMethodCalled(method: string, payload?: Record<string, unknown>): TelemetryEventRaw<EventMethodCalled>;

export { TelemetryCollector, type TelemetryCollectorOptions, eventComponentMounted, eventMethodCalled };
